name: ARM Linux Build for Emuelec4.7 (Complete)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-mrp:
    name: Build MRP Emulator (aarch64)
    runs-on: ubuntu-22.04
    env:
      TOOLCHAIN: aarch64-linux-gnu
      ARCH: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure architecture
        run: |
          sudo dpkg --add-architecture ${{ env.ARCH }}

      - name: Configure APT sources
        run: |
          sudo rm -f /etc/apt/sources.list.d/*.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/${{ env.ARCH }}.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/${{ env.ARCH }}.list

      - name: Update package index
        run: |
          sudo apt-get update -y --fix-missing || true

      - name: Install dependencies
        run: |
          sudo apt-get install -y \
            gcc-${{ env.TOOLCHAIN }} \
            g++-${{ env.TOOLCHAIN }} \
            libsdl2-dev:${{ env.ARCH }} \
            zlib1g-dev:${{ env.ARCH }} \
            libglib2.0-dev:${{ env.ARCH }} \
            make \
            wget \
            unzip \
            pkg-config \
            qemu-user-static \
            git \
            cmake

      - name: Build Unicorn Engine (ARM-only)
        run: |
          git clone https://github.com/unicorn-engine/unicorn.git
          cd unicorn
          git checkout 1.0.3
          
          mkdir build && cd build
          cmake .. \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=${{ env.TOOLCHAIN }}-gcc \
            -DCMAKE_CXX_COMPILER=${{ env.TOOLCHAIN }}-g++ \
            -DCMAKE_INSTALL_PREFIX=/usr/${{ env.TOOLCHAIN }} \
            -DBUILD_SHARED_LIBS=OFF \
            -DUNICORN_ARCH_ARM=ON \
            -DUNICORN_ARCH_X86=OFF \
            -DUNICORN_ARCH_MIPS=OFF \
            -DUNICORN_ARCH_SPARC=OFF \
            -DUNICORN_ARCH_M68K=OFF \
            -DUNICORN_BUILD_SAMPLES=OFF
          
          make -j$(nproc)
          sudo make install
          cd ../..
          sudo ldconfig

      - name: Build Capstone (Manual cross-compile)
        run: |
          wget https://github.com/capstone-engine/capstone/archive/4.0.2.tar.gz -O capstone.tar.gz
          tar -zxf capstone.tar.gz
          cd capstone-4.0.2
          
          # 手动指定交叉编译器，不依赖脚本参数
          export CC=${{ env.TOOLCHAIN }}-gcc
          export CXX=${{ env.TOOLCHAIN }}-g++
          ./make.sh
          sudo make install PREFIX=/usr/${{ env.TOOLCHAIN }}
          cd ..

      - name: Build MRP emulator
        run: |
          export CC=${{ env.TOOLCHAIN }}-gcc
          # 屏蔽64位架构下的指针转换警告，移除不存在的src/mr_noparser.c
          export CFLAGS="-I/usr/${{ env.TOOLCHAIN }}/include -march=armv8-a -O2 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast"
          export LDFLAGS="-L/usr/${{ env.TOOLCHAIN }}/lib -lunicorn -lglib-2.0 -lz -lcapstone"
          
          # 编译mythroad模块
          cd mythroad && make full && cd ..
          
          # 显式指定源文件列表（剔除不存在的src/mr_noparser.c）
          make VMRP=1 DEBUG=0 \
            SRCS="src/mr_api.c src/mr_debug.c src/mr_do.c src/mr_dump.c src/mr_func.c src/mr_gc.c src/mr_mem.c src/mr_opcodes.c src/mr_object.c src/mr_state.c src/mr_string.c src/mr_table.c src/mr_tm.c src/mr_undump.c src/mr_vm.c src/mr_zio.c src/lib/mr_auxiliar.c src/lib/mr_auxlib.c src/lib/mr_baselib.c src/lib/mr_iolib_target.c src/lib/mr_socket_target.c src/lib/mr_strlib.c src/lib/mr_tablib.c src/lib/mr_tcp_target.c mythroad.c encode.c mr_pluto.c mr_unzip.c mr_base64.c mr_graphics.c mr_inflate.c string.c printf.c other.c strtol.c strtoul.c dsm.c fixR9.c md5.c mem.c asm/r9r10.s asm/globalValue.s main.c"
          
          # 验证编译结果
          file ./bin/vmrp

      - name: Package for Emuelec (PortMaster format)
        run: |
          mkdir -p vmrp-portmaster/${{ env.ARCH }}
          cp ./bin/vmrp vmrp-portmaster/${{ env.ARCH }}/
          
          # 收集运行时依赖库
          DEPS=$(qemu-${{ env.ARCH }}-static ./bin/vmrp --version 2>&1 | grep -oP 'lib\S+' || true)
          for dep in $DEPS; do
            find /usr/${{ env.TOOLCHAIN }}/lib -name "$dep*" -exec cp {} vmrp-portmaster/${{ env.ARCH }}/ \;
          done
          
          # 生成PortMaster元数据
          cat > vmrp-portmaster/portmaster.json << EOF
          {
            "name": "vmrp",
            "version": "1.0.0",
            "author": "Your Name",
            "architecture": "${{ env.ARCH }}",
            "executable": "${{ env.ARCH }}/vmrp",
            "description": "MRP Emulator (VMRP) for Emuelec",
            "file_extensions": ["mrp"],
            "launch_command": "%ROM%"
          }
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vmrp-emuelec-${{ env.ARCH }}
          path: vmrp-portmaster/
          retention-days: 14

  verify-build:
    name: Verify build
    needs: build-mrp
    runs-on: ubuntu-22.04
    env:
      ARCH: arm64

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: vmrp-emuelec-${{ env.ARCH }}
          path: build

      - name: Install QEMU for verification
        run: sudo apt-get install -y qemu-user-static

      - name: Verify executable runs
        run: |
          chmod +x build/${{ env.ARCH }}/vmrp
          # 测试程序能否启动（显示帮助信息）
          qemu-${{ env.ARCH }}-static build/${{ env.ARCH }}/vmrp --help || echo "Expected non-zero exit for help command"

      - name: Check package structure
        run: |
          tree build/
          cat build/portmaster.json
          file build/${{ env.ARCH }}/vmrp
