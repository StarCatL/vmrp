name: ARM Linux Build for Emuelec4.7 (Fix Dependency Conflicts)

on:
  workflow_dispatch:

jobs:
  build-mrp:
    runs-on: ubuntu-22.04
    env:
      TOOLCHAIN: aarch64-linux-gnu
      ARCH: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Clean and reconfigure multi-arch support
        run: |
          # 清除现有源配置
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo rm -f /etc/apt/sources.list
          
          # 重新配置源（确保amd64和arm64源正确分离）
          # 1. amd64主源（系统架构）
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          
          # 2. arm64交叉编译源（目标架构）
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/${{ env.ARCH }}.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/${{ env.ARCH }}.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/${{ env.ARCH }}.list

      - name: Update package index with fix
        run: |
          # 强制更新并忽略无关错误
          sudo apt-get clean
          sudo apt-get update -y --fix-missing || true

      - name: Install critical base libraries first (解决libc依赖)
        run: |
          # 优先安装arm64基础库（所有依赖的根节点）
          sudo apt-get install -y \
            libc6:${{ env.ARCH }} \
            libgcc-s1:${{ env.ARCH }} \
            libstdc++6:${{ env.ARCH }} \
            zlib1g:${{ env.ARCH }}

      - name: Install remaining dependencies
        run: |
          sudo apt-get install -y \
            gcc-${{ env.TOOLCHAIN }} \
            g++-${{ env.TOOLCHAIN }} \
            libsdl2-dev:${{ env.ARCH }} \
            zlib1g-dev:${{ env.ARCH }} \
            libglib2.0-dev:${{ env.ARCH }} \
            make \
            git \
            cmake \
            qemu-user-static

      # 后续步骤（Unicorn/Capstone编译等）与之前的工作流相同
      - name: Build Unicorn Engine (ARM-only)
        run: |
          git clone https://github.com/unicorn-engine/unicorn.git
          cd unicorn && git checkout 1.0.3
          mkdir build && cd build
          cmake .. \
            -DCMAKE_C_COMPILER=${{ env.TOOLCHAIN }}-gcc \
            -DCMAKE_INSTALL_PREFIX=/usr/${{ env.TOOLCHAIN }} \
            -DBUILD_SHARED_LIBS=OFF \
            -DUNICORN_ARCH_ARM=ON \
            -DUNICORN_ARCH_X86=OFF
          make -j$(nproc) && sudo make install
          cd ../.. && sudo ldconfig

      - name: Build Capstone
        run: |
          wget https://github.com/capstone-engine/capstone/archive/4.0.2.tar.gz -O capstone.tar.gz
          tar -zxf capstone.tar.gz
          cd capstone-4.0.2
          export CC=${{ env.TOOLCHAIN }}-gcc
          ./make.sh && sudo make install PREFIX=/usr/${{ env.TOOLCHAIN }}
          cd ..

      - name: Fix Makefiles
        run: |
          # 移除无效文件和编译选项
          [ -f "Makefile" ] && sed -i -e '/src\/mr_noparser\.c/d' -e '/main\.c/d' -e '/asm\//d' -e 's/-mlong-calls//g' Makefile
          [ -f "mythroad/Makefile" ] && sed -i -e "s/arm-none-eabi-gcc/${{ env.TOOLCHAIN }}-gcc/" -e 's/-nostartfiles//g' -e 's/--entry=dsm_init//g' mythroad/Makefile

      - name: Build MRP emulator
        run: |
          export CC=${{ env.TOOLCHAIN }}-gcc
          export CFLAGS="-I/usr/${{ env.TOOLCHAIN }}/include -march=armv8-a -O2 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast"
          export LDFLAGS="-L/usr/${{ env.TOOLCHAIN }}/lib -lunicorn -lglib-2.0 -lz -lcapstone -lSDL2"
          cd mythroad && make full && cd ..
          make VMRP=1 DEBUG=0 \
            SRCS="src/mr_api.c src/mr_debug.c src/mr_do.c src/mr_dump.c src/mr_func.c src/mr_gc.c src/mr_mem.c src/mr_opcodes.c src/mr_object.c src/mr_state.c src/mr_string.c src/mr_table.c src/mr_tm.c src/mr_undump.c src/mr_vm.c src/mr_zio.c src/lib/mr_auxiliar.c src/lib/mr_auxlib.c src/lib/mr_baselib.c src/lib/mr_iolib_target.c src/lib/mr_socket_target.c src/lib/mr_strlib.c src/lib/mr_tablib.c src/lib/mr_tcp_target.c mythroad.c encode.c mr_pluto.c mr_unzip.c mr_base64.c mr_graphics.c mr_inflate.c string.c printf.c other.c strtol.c strtoul.c dsm.c fixR9.c md5.c mem.c"

      - name: Package and upload
        run: |
          mkdir -p vmrp-portmaster/${{ env.ARCH }}
          cp ./bin/vmrp vmrp-portmaster/${{ env.ARCH }}/
          echo '{"name":"vmrp","version":"1.0","architecture":"${{ env.ARCH }}"}' > vmrp-portmaster/portmaster.json
          uses: actions/upload-artifact@v4
          with:
            name: vmrp-emuelec
            path: vmrp-portmaster/
