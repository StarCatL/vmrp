name: ARM Linux Build for Emuelec4.7

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [aarch64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up cross-compilation environment
        run: |
          # 添加ARM64架构支持
          sudo dpkg --add-architecture arm64
          
          # 修复APT源问题：禁用安全仓库中的ARM64架构
          sudo sed -i 's/^deb http:\/\/security.ubuntu.com\/ubuntu.*//g' /etc/apt/sources.list
          sudo sed -i 's/^deb-src http:\/\/security.ubuntu.com\/ubuntu.*//g' /etc/apt/sources.list
          
          # 添加ARM64兼容的Ubuntu PPA源
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libsdl2-dev:arm64 \
            zlib1g-dev:arm64 \
            make \
            wget \
            unzip \
            build-essential

          # 安装unicorn（Arm64版本）
          wget https://github.com/unicorn-engine/unicorn/releases/download/1.0.2/unicorn-1.0.2-linux-arm64.tar.gz
          tar -zxf unicorn-1.0.2-linux-arm64.tar.gz
          sudo cp -r unicorn-1.0.2-linux-arm64/include/* /usr/aarch64-linux-gnu/include/
          sudo cp -r unicorn-1.0.2-linux-arm64/lib/* /usr/aarch64-linux-gnu/lib/

          # 安装capstone
          wget https://github.com/capstone-engine/capstone/archive/refs/tags/4.0.2.tar.gz -O capstone-4.0.2.tar.gz
          tar -zxf capstone-4.0.2.tar.gz
          cd capstone-4.0.2
          ./make.sh cross-aarch64
          sudo make install PREFIX=/usr/aarch64-linux-gnu
          cd ..

      - name: Build mythroad module
        run: |
          cd mythroad
          make CC=aarch64-linux-gnu-gcc \
               AR=aarch64-linux-gnu-ar \
               CFLAGS="-m64 -I/usr/aarch64-linux-gnu/include" \
               LDFLAGS="-L/usr/aarch64-linux-gnu/lib" \
               full

      - name: Build main vmrp
        run: |
          make CC=aarch64-linux-gnu-gcc \
               CFLAGS="-m64 -DVMRP -I/usr/aarch64-linux-gnu/include" \
               LDFLAGS="-L/usr/aarch64-linux-gnu/lib -lSDL2 -lunicorn -lz -lm" \
               DEBUG=0

      - name: Prepare PortMaster package
        run: |
          # 创建符合PortMaster规范的目录结构
          mkdir -p vmrp-portmaster/aarch64
          cp ./bin/vmrp ./vmrp-portmaster/aarch64/
          
          # 复制依赖库
          cp /usr/aarch64-linux-gnu/lib/libSDL2-2.0.so.0 ./vmrp-portmaster/aarch64/
          cp /usr/aarch64-linux-gnu/lib/libunicorn.so.1 ./vmrp-portmaster/aarch64/
          cp /usr/aarch64-linux-gnu/lib/libz.so.1 ./vmrp-portmaster/aarch64/
          
          # 创建PortMaster元数据
          cat > ./vmrp-portmaster/portmaster.json << EOF
          {
            "name": "vmrp",
            "version": "1.0",
            "author": "Your Name",
            "architecture": "aarch64",
            "runtime": "mesa_pkg_0.1.squashfs",
            "executable": "aarch64/vmrp",
            "description": "VMRP - 冒泡社区游戏启动器"
          }
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vmrp-emuelec-s905l3a
          path: vmrp-portmaster/
