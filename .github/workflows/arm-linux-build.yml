name: Build and Release

on:
 workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  create-nightly-release:
    runs-on: ubuntu-latest
    outputs:
      is_active: ${{ steps.check.outputs.active }}
    steps:
      - name: Check if nightly release is active
        id: check
        run: echo "active=true" >> $GITHUB_OUTPUT  # 实际场景中根据条件判断

  build:
    name: Build ${{ matrix.build_name }}
    needs: create-nightly-release
    if: needs.create-nightly-release.outputs.is_active == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - build_name: linux-x86_64
            os: ubuntu-22.04
            arch: x64
            target: x86_64-unknown-linux-gnu
            cargo_build_dir: target/x86_64-unknown-linux-gnu/release
          - build_name: linux-aarch64
            os: ubuntu-22.04
            arch: arm64  # 官方ARM64架构声明
            target: aarch64-unknown-linux-gnu
            cargo_build_dir: target/aarch64-unknown-linux-gnu/release
          # 可添加其他平台配置（如windows、macos）

    runs-on: ${{ matrix.os }}
    env:
      CARGO_TARGET_DIR: ${{ matrix.cargo_build_dir }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install target dependencies
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu  # ARM64交叉编译工具

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Verify build output
        run: |
          ls -la ${{ matrix.cargo_build_dir }}
          file ${{ matrix.cargo_build_dir }}/your_binary  # 替换为实际二进制文件名

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build_name }}-binary
          path: ${{ matrix.cargo_build_dir }}/your_binary
