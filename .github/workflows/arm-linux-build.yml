name: ARM Linux Build for Emuelec4.7

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build mrp emulator (${{ matrix.arch }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64]
        include:
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
            compiler: aarch64-linux-gnu-gcc
            libdir: /usr/aarch64-linux-gnu/lib
            includedir: /usr/aarch64-linux-gnu/include

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure APT sources
        run: |
          # 仅保留必要的架构源配置
          sudo dpkg --add-architecture arm64
          
          # 清理默认源中的ARM64引用
          sudo sed -i '/deb.*arm64/d' /etc/apt/sources.list
          
          # 添加ARM64专用源（ports.ubuntu.com为官方ARM源）
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list

      - name: Install build dependencies
        run: |
          sudo apt-get update -y --fix-missing
          sudo apt-get install -y \
            gcc-${{ matrix.compiler }} \
            g++-${{ matrix.compiler }} \
            libsdl2-dev:arm64 \
            zlib1g-dev:arm64 \
            make \
            wget \
            unzip \
            build-essential \
            pkg-config

      - name: Install unicorn engine (ARM64)
        run: |
          # 安装预编译的unicorn库
          wget https://github.com/unicorn-engine/unicorn/releases/download/1.0.2/unicorn-1.0.2-linux-arm64.tar.gz
          tar -zxf unicorn-1.0.2-linux-arm64.tar.gz
          sudo cp -r unicorn-1.0.2-linux-arm64/include/* ${{ matrix.includedir }}/
          sudo cp -r unicorn-1.0.2-linux-arm64/lib/* ${{ matrix.libdir }}/
          sudo ldconfig

      - name: Build capstone (cross-compile)
        run: |
          wget https://github.com/capstone-engine/capstone/archive/refs/tags/4.0.2.tar.gz -O capstone-4.0.2.tar.gz
          tar -zxf capstone-4.0.2.tar.gz
          cd capstone-4.0.2
          ./make.sh cross-${{ matrix.arch }}
          sudo make install PREFIX=/usr/${{ matrix.arch }}-linux-gnu
          cd ..

      - name: Build mythroad module
        run: |
          cd mythroad
          make CC=${{ matrix.compiler }} \
               AR=${{ matrix.arch }}-linux-gnu-ar \
               CFLAGS="-I${{ matrix.includedir }} -Wall -O2" \
               LDFLAGS="-L${{ matrix.libdir }}" \
               full

      - name: Build main vmrp emulator
        run: |
          make CC=${{ matrix.compiler }} \
               CFLAGS="-DVMRP -I${{ matrix.includedir }} -march=armv8-a -mtune=cortex-a53 -O2" \
               LDFLAGS="-L${{ matrix.libdir }} -lSDL2 -lunicorn -lz -lm -ldl" \
               DEBUG=0
          # 验证编译结果
          file ./bin/vmrp

      - name: Prepare PortMaster package
        run: |
          # 创建标准目录结构
          mkdir -p vmrp-portmaster/${{ matrix.arch }}
          cp ./bin/vmrp vmrp-portmaster/${{ matrix.arch }}/
          
          # 收集依赖库
          LIB_DEPS=$(ldd ./bin/vmrp | grep -v 'not found' | awk '/lib/ {print $1}')
          for lib in $LIB_DEPS; do
            find ${{ matrix.libdir }} -name $lib -exec cp {} vmrp-portmaster/${{ matrix.arch }}/ \;
          done
          
          # 创建元数据文件
          cat > vmrp-portmaster/portmaster.json << EOF
          {
            "name": "vmrp",
            "version": "1.0.0",
            "author": "Your Name",
            "architecture": "${{ matrix.arch }}",
            "runtime": "mesa_pkg_0.1.squashfs",
            "executable": "${{ matrix.arch }}/vmrp",
            "description": "VMRP - MRP emulator for Emuelec",
            "file_types": ["mrp"],
            "launcher": "default"
          }
          EOF

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vmrp-emuelec-${{ matrix.arch }}
          path: vmrp-portmaster/
          retention-days: 14

  test-build:
    name: Verify build package
    needs: build
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [aarch64]

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: vmrp-emuelec-${{ matrix.arch }}
          path: test

      - name: Verify package structure
        run: |
          tree test/
          cat test/portmaster.json
          file test/${{ matrix.arch }}/vmrp

      - name: Test with QEMU
        run: |
          # 安装ARM64模拟器
          sudo apt-get install -y qemu-user-static
          # 尝试运行模拟器
          qemu-${{ matrix.arch }}-static test/${{ matrix.arch }}/vmrp --help || echo "Expected non-zero exit for help command"
